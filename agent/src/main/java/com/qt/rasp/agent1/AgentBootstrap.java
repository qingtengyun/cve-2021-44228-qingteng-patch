package com.qt.rasp.agent1;

import com.qt.rasp.agent.RaspClassLoader;

import java.io.File;
import java.io.PrintStream;
import java.lang.instrument.Instrumentation;
import java.net.URL;

public class AgentBootstrap {
    private static final String QT_LOG4J_PATCH_JAR = "qt-log4j-patch.jar";
    private static final String LOG4J_PATCH_BOOTSTRAP = "com.qt.log4j.Log4JPatch";
    private static final String PATCH_INSTALL_PROP = "com.qt.log4j.Log4JPatch";

    private static final String INSTALL = "install";

    private static final PrintStream ps = System.err;

    private static volatile ClassLoader raspClassLoader;

    public static void premain(String args, Instrumentation inst) {
        main(args, inst);
    }

    public static void agentmain(String args, Instrumentation inst) {
        main(args, inst);
    }

    private static ClassLoader getClassLoader(Instrumentation inst, File arthasCoreJarFile) throws Throwable {
        if (raspClassLoader == null) {
            raspClassLoader = new RaspClassLoader(new URL[]{arthasCoreJarFile.toURI().toURL()});
        }
        return raspClassLoader;
    }

    private static synchronized void main(String args, final Instrumentation inst) {
        // 简单处理，防止重复注入
        String value = System.getProperty(PATCH_INSTALL_PROP);
        if (value != null) {
            System.out.println("already patched, return");
            return;
        }

        if (args != null && args.endsWith(QT_LOG4J_PATCH_JAR)) {
            ps.println("patch log4j start...");
            try {
                install(inst, args);
            } catch (Throwable t) {
                t.printStackTrace(ps);
                throw new RuntimeException(t);
            }
        }
    }

    private static synchronized void install(final Instrumentation inst, String patchJarFilePath) {
        try {
            File patchJarFile = new File(patchJarFilePath);
            if (!patchJarFile.exists()) {
                ps.println("Can not find patch jar file");
                return;
            }

            final ClassLoader agentLoader = getClassLoader(inst, patchJarFile);

            Class<?> log4jPatchClass = agentLoader.loadClass(LOG4J_PATCH_BOOTSTRAP);
            log4jPatchClass.getMethod(INSTALL, Instrumentation.class).invoke(null, inst);
            ps.println("patch success");
        } catch (Throwable t) {
            throw new RuntimeException(t);
        }
    }
}
