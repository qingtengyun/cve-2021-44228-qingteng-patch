package com.qt.log4j;

import org.objectweb.asm.*;

import java.lang.instrument.ClassFileTransformer;
import java.lang.instrument.Instrumentation;
import java.lang.instrument.UnmodifiableClassException;
import java.security.ProtectionDomain;

public class Log4JPatch {

    private static final String PATCH_INSTALL_PROP = "com.qt.log4j.Log4JPatch";

    public static void install(Instrumentation inst) {
        final int asm = Opcodes.ASM9;

        ClassFileTransformer transformer = new ClassFileTransformer() {
            public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined,
                                    ProtectionDomain protectionDomain, byte[] classfileBuffer) {
                if ("org/apache/logging/log4j/core/lookup/JndiLookup".equals(className)) {
                    System.out.println("Transforming " + className + " (" + loader + ")");
                    ClassWriter cw = new ClassWriter(ClassWriter.COMPUTE_FRAMES | ClassWriter.COMPUTE_MAXS);
                    MethodInstrumentorClassVisitor cv = new MethodInstrumentorClassVisitor(asm, cw);
                    ClassReader cr = new ClassReader(classfileBuffer);
                    cr.accept(cv, 0);
                    return cw.toByteArray();
                } else {
                    return null;
                }
            }
        };
        inst.addTransformer(transformer, true);

        for (Class c : inst.getAllLoadedClasses()) {
            if ("org.apache.logging.log4j.core.lookup.JndiLookup".equals(c.getName())) {
                System.out.println("Patching " + c + " (" + c.getClassLoader() + ")");
                try {
                    inst.retransformClasses(c);
                } catch (Throwable e) {
                    System.err.println(e.getMessage());
                }
            }
        }

        System.setProperty(PATCH_INSTALL_PROP, "true");
    }

    private static class MethodInstrumentorClassVisitor extends ClassVisitor {
        private final int asm;

        public MethodInstrumentorClassVisitor(int asm, ClassVisitor cv) {
            super(asm, cv);
            this.asm = asm;
        }

        @Override
        public MethodVisitor visitMethod(int access, String name, String desc, String signature, String[] exceptions) {
            MethodVisitor mv = cv.visitMethod(access, name, desc, signature, exceptions);
            if ("lookup".equals(name)) {
                mv = new MethodInstrumentorMethodVisitor(asm, mv);
            }
            return mv;
        }
    }

    private static class MethodInstrumentorMethodVisitor extends MethodVisitor implements Opcodes {

        public MethodInstrumentorMethodVisitor(int asm, MethodVisitor mv) {
            super(asm, mv);
        }

        @Override
        public void visitCode() {
            mv.visitCode();
            mv.visitLdcInsn("Patched JndiLookup::lookup() by qingteng");
            mv.visitInsn(ARETURN);
        }
    }
}
